import { Translation } from './translation'


export const EN: Translation = {
  language: 'English',
  languageShort: 'EN',
  common: {
    darkTheme: 'Dark theme',
    lightTheme: 'Light theme',
    language: 'Language',
    about: 'About',
    // user actions
    back: 'Back',
    reset: 'Reset',
    // errors
    errorRequired: 'Required field',
  },
  mainPage: {
    title: 'RCE Optimizer',
    cellDefinition: {
      link: 'New cell definition',
      annotation: 'Description of a robotic cell, robots\' movements, and action dependencies for energy optimization.',
    },
  },
  cellDefPage: {
    title: 'New cell definition',
    cellInfo: {
      name: 'Name',
      cycleTime: 'Cycle time',
      note: 'Note',
    },
    robots: {
      robotsLabel: 'Robots',
      addRobotBtn: 'Add robot',
      checkRobotsBtn: {
        NO: 'Check robots',
        OK: 'Data OK',
        ERROR: 'Fix errors',
      },
      robotLabel: 'Robot',
      id: 'Id',
      note: 'Note',
      errorIdEmpty: 'Id cannot be empty',
      errorIdNotUnique: 'Id must be unique among all robots',
      activities: {
        activitiesLabel: 'Activities',
        addMovementBtn: 'Add movement',
        addWorkBtn: 'Add work',
        idleActivityLabel: 'Static position',
        movementActivityLabel: 'Movement',
        workActivityLabel: 'Work',
        changeToMovementActivity: 'Change to Move',
        changeToWorkActivity: 'Change to Work',
        id: 'Id',
        position: 'Position',
        note: 'Note',
        minDuration: 'Min dur.',
        maxDuration: 'Max dur.',
        duration: 'Duration',
        fixedStartTime: 'Fixed start',
        fixedEndTime: 'Fixed end',
        errorIdEmpty: 'Id cannot be empty',
        errorIdNotUnique: 'Id must be unique among all activities',
        errorMinMaxDurationOrder: 'Min duration is longer than max duration',
        errorBothFixedUsedInMovement: 'Use "Work" to set both fixed times',
        errorNegativeDuration: 'Negative duration',
        errorNegativeFixedTime: 'Negative fixed time',
      },
    },
    timeOffsets: {
      timeOffsetsLabel: 'Time offsets',
      addTimeOffsetBtn: 'Add time offset',
      checkTimeOffsetsBtn: {
        NO: 'Check offsets',
        OK: 'Data OK',
        ERROR: 'Fix errors',
      },
      timeOffsetLabel: 'Time offset',
      aId: 'Activity A',
      bId: 'Activity B',
      minOffset: 'Min offset',
      maxOffset: 'Max offset',
      errorSameIds: 'Activities must be different',
      errorMinMaxOffsetsOrder: 'Min offset is longer than max offset',
      errorMinMaxOffsetUndef: 'At least min or max offset must be defined',
    },
    collisions: {
      collisionsLabel: 'Collisions',
      addCollisionBtn: 'Add collision',
      checkCollisionsBtn: {
        NO: 'Check collision',
        OK: 'Data OK',
        ERROR: 'Fix errors',
      },
      collisionLabel: 'Collision',
      aId: 'Activity A',
      bId: 'Activity B',
      bPrevSkipRatio: 'B-prev skip (%)',
      bNextSkipRatio: 'B-next skip (%)',
      errorSameRobotIds: 'Robots of activities must be different',
      errorNegativeSkipRatio: 'Negative skip ratio',
    },
  },
}
